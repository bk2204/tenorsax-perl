#!/usr/bin/perl

use v5.14;
use strict;
use warnings;

use open qw/:encoding(UTF-8) :std/;
use warnings qw/FATAL utf8/;
use utf8;

use FindBin;
use lib "$FindBin::RealBin/lib";

use File::Path::Expand;
use Getopt::Long;
use TenorSAX;
use TenorSAX::Source::Troff;
use XML::SAX::Writer;

my $options = {
	device => 'xml',
	macro => [],
	macrodir => [],
	output => undef,
};
my $p = Getopt::Long::Parser->new();
$p->configure('no_ignore_case', 'bundling');
$p->getoptions($options,
	'device|T=s',
	'macro|m=s@',
	'macrodir|M=s@',
	'output|o=s',
);

my %attr = ($options->{output} ? (Output => $options->{output}) : ());
my $output;
my $resolution = 72000;
for ($options->{device}) {
	when ("text") {
		require TenorSAX::Output::Text;
		$output = TenorSAX::Output::Text->new(%attr);
	}
	when ("utf8") {
		require TenorSAX::Output::Terminal;
		$resolution = 240;
		$output = TenorSAX::Output::Terminal->new(Resolution => $resolution,
			%attr);
	}
	when ("xml") {
		require XML::SAX::Writer;
		$output = XML::SAX::Writer->new(%attr);
	}
	when ("pdf") {
		require TenorSAX::Output::PDF;
		$output = TenorSAX::Output::PDF->new(%attr);
	}
	default {
		my $stylesheet;
		my @xslt_dirs = map { File::Path::Expand::expand_filename($_) }
			@{$TenorSAX::Config->{troff}->{xslt}};
		foreach my $dir (reverse @xslt_dirs) {
			$stylesheet = "$dir/format-$options->{device}.xsl";
			last if -r $stylesheet;
			$stylesheet = undef;
		}
		die "Can't load stylesheet for device $options->{device}"
			unless $stylesheet;

		require XML::SAX::Writer;
		require XML::Filter::XSLT;
		my $final = XML::SAX::Writer->new(%attr);
		$output = XML::Filter::XSLT->new(Handler => $final);
		$output->set_stylesheet_uri($stylesheet);
	}
}
my $parser = TenorSAX::Source::Troff->new(Handler => $output,
	Resolution => $resolution);

my @init_files = map { File::Path::Expand::expand_filename($_) }
	@{$TenorSAX::Config->{troff}->{init_tmac}};

my $data = "";
foreach my $macrodir (@{$options->{macrodir}}) {
	$data .= ".do tenorsax macrodir \"$macrodir\"\n";
}
foreach my $file (@init_files) {
	local $/;
	open(my $fh, '<', $file) or next;
	$data .= ".do tenorsax filename \"$file\"\n";
	$data .= <$fh>;
	close($fh);
}
foreach my $macro (@{$options->{macro}}) {
	$data .= ".do mso \"$macro\"\n";
}
if (@ARGV) {
	foreach my $file (@ARGV) {
		local $/;
		open(my $fh, '<', $file) or die "Can't open file '$file': $!";
		$data .= ".do tenorsax filename \"$file\"\n";
		$data .= <$fh>;
		close($fh) or die "Can't close file '$file': $!";
	}
}
else {
	local $/;
	$data .= <STDIN>;
}

$parser->parse_string($data);
