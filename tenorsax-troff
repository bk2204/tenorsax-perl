#!/usr/bin/perl

package TenorSAX::App::Troff;

use v5.14;
use strict;
use warnings;

use open qw/:encoding(UTF-8) :std/;
use warnings qw/FATAL utf8/;
use utf8;

use FindBin;
use lib "$FindBin::RealBin/lib";

use File::Path::Expand;
use Getopt::Long;
use TenorSAX;
use TenorSAX::Source::Troff;

use Moose;

extends "TenorSAX::App";

has '+options' => (
	default => sub {
		[
			'device|T=s',
			'macro|m=s@',
			'macrodir|M=s@',
			'output|o=s',
		],
	},
);
# macro names
has 'macro' => (
	is => 'rw',
	isa => 'ArrayRef',
	default => sub { [] },
);
has 'macrodir' => (
	is => 'rw',
	isa => 'ArrayRef',
	default => sub { [] },
);

exit run(@ARGV) unless caller;

sub run {
	my @args = @_;
	my $app = __PACKAGE__->new(InputDevice => "troff");
	$app->parse_options(\@args);
	my $parser = $app->handle_input_format;
	my $data = $app->load_data(@args);
	$parser->parse_string($data);

	return 0;
}

sub handle_input_format {
	my $self = shift;
	my $logger = sub {};
	if ($ENV{TENORSAX_DEBUG}) {
		$logger = sub { say STDERR @_ };
	}

	my $chain = $self->generate_output_chain([qw/le xml/], "xml");
	my $parser = TenorSAX::Source::Troff->new(Handler => $chain,
		Resolution => $self->resolution, Logger => $logger);
	return $parser;
}

sub load_file {
	my ($self, $file) = @_;

	local $/;
	open(my $fh, '<', $file) or die "Can't open file '$file': $!";
	my $data = qq(.do tenorsax filename "$file"\n) . <$fh>;
	close($fh) or die "Can't close file '$file': $!";
	return $data;
}

sub load_data {
	my ($self, @args) = @_;
	my @init_files = map { File::Path::Expand::expand_filename($_) }
		@{$TenorSAX::Config->{troff}->{init_tmac}};

	my $data = "";
	foreach my $macrodir (@{$self->macrodir}) {
		$data .= ".do tenorsax macrodir \"$macrodir\"\n";
	}
	foreach my $file (@init_files) {
		my $loaded = eval { $self->load_file($file) } or next;
		$data .= $loaded;
	}
	foreach my $macro (@{$self->macro}) {
		$data .= ".do mso \"$macro\"\n";
	}
	$data .= $self->load_files(@args);
	return $data;
}
